(reverse (range 10))
(reverse (range 10 20))
(reverse (range 0 (inc 10)))
(clojure.string/join '|' '(1 2 3 4))
(* "hello" 6)
(repeat 3 "hello")
(join (repeat 3 "hello"))
(clojure.string/join "" (repeat 3 "hello"))
(remove "wub" "wubwubhello")
(clojure.string/replace "wubwubhello" #"wub" "")
(clojure.string/replace "wubwubhello" #"/wub/g" " ")
(clojure.string/replace "wubwubhello" #"/[wub]/g" " ")
(clojure.string/replace "wubwubhello" #"/wub/g" " ")
(clojure.string/replace "wubwubhello" #"wub" " ")
(clojure.string/replace "wubwubhello" #"wub" "")
(split ""(clojure.string/replace "wubwubhello" #"wub" ""))
(clojure.string/split ""(clojure.string/replace "wubwubhello" #"wub" ""))
(split #"" (clojure.string/replace "wubwubhello" #"wub" ""))
(clojure.string/split #"" (clojure.string/replace "wubwubhello" #"wub" ""))
(clojure.string/split (clojure.string/replace "wubwubhello" #"wub" "") #"")
(clojure.string/join (clojure.string/split (clojure.string/replace "wubwubhello" #"wub" "") #"") " ")
(clojure.string/join " " (clojure.string/split (clojure.string/replace "wubwubhello" #"wub" "") #""))
(first (defn song-decoder
  [song]
  (-> song
      (str/replace #"WUB" ""))
      (str/split)
      (str/join " "))
  
(first "1 year old")
(sub "1 year old" 1)
(subs "1 year old" 1)
(subs "1 year old" 0 1)
(clojure.string/repeat "hello" 6)
(repeat 6 "hello")
(clojure.string/join (repeat 6 "hello") "")
(clojure.string/join "" (repeat 6 "hello"))
(clojure.string/join " " (repeat 6 "hello"))
(defn repeat-str [n strng]
  (->> (repeat n strng)
       (clojure.string/join "")))
(repeat-str 4 'je')
(key {:rock [1 2]})
(key {:rock 1})
(map key {:rock 1})
(map value {:rock 1})
(map val {:rock 1})
(map val {:rock ['hello' 'money'})
(map val {:rock ['hello' 'money']})
(map val {:rock ["hello" "money"]})
 {:rock ["hello" "money"]}
 {:rock '("hello" "money")}
(get :rock {:rock '("hello" "money")})
(val :rock {:rock '("hello" "money")})
(map val :rock {:rock '("hello" "money")})
(map val {:rock '("hello" "money")})
(get {:rock '("hello" "money")} :rock)
(get {:rock '("hello" "money") :paper '("jojo")} :rock)
(get {:rock '("hello" "money") :paper '("jojo")} :paper)
(name :foo)
